# python 3.9
# devel<->runtime
FROM nvidia/cuda:11.4.0-cudnn8-devel-ubuntu20.04

ENV YOUR_ENV="dev" \
  PYTHONDONTWRITEBYTECODE=1 \
  PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  PIP_NO_CACHE_DIR=off \
  PIP_DISABLE_PIP_VERSION_CHECK=on \
  PIP_DEFAULT_TIMEOUT=100 \
  DEBIAN_FRONTEND=noninteractive \ 
  PYTHON_VERSION=3.9.5 \
  WORKDIR=/usr/app
  
# set working directory
WORKDIR $WORKDIR

# install system dependencies 
RUN apt update \
  && apt -y install netcat gcc curl make openssl systemd git build-essential \
    curl libbz2-dev libffi-dev liblzma-dev libncursesw5-dev libreadline-dev libsqlite3-dev \
    libssl-dev libxml2-dev libxmlsec1-dev llvm make tk-dev wget xz-utils zlib1g-dev \
  && apt clean

# install NVIDIA driver version in container2
ENV NVIDIA_DRIVER_VERSION 495
ENV NVIDIA_DRIVER nvidia-driver-$NVIDIA_DRIVER_VERSION
RUN apt install -y --fix-missing $NVIDIA_DRIVER

# -- python
# Set-up necessary Env vars for PyEnv
ENV PYENV_ROOT /usr/local/.pyenv
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH
# Install pyenv
ENV PYTHON_VERSION 3.10.0
RUN set -ex \
    && curl https://pyenv.run | bash \
    && pyenv update \
    && env PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install $PYTHON_VERSION \
    && pyenv global $PYTHON_VERSION \
    && pyenv rehash

# install poetry
ENV POETRY_HOME /opt/poetry
ENV PATH $POETRY_HOME/bin:$PATH
RUN curl -sSL https://install.python-poetry.org | POETRY_PREVIEW=1 python3 -

# cache python requirements in docker layer
COPY pyproject.toml poetry.lock*  ./

# install python dependencies
RUN poetry install $(test "$YOUR_ENV" == production && echo "--no-dev") --no-interaction --no-ansi
RUN poetry lock

# apply jupyter themes for notebook aesthetics
RUN poetry run jt -t chesterish -cellw 95%
RUN poetry run jupyter contrib nbextension install --user

#move local code over
COPY . .

CMD ["poetry", "run", "jupyter-notebook", "--no-browser", "--host", "0.0.0.0"]
